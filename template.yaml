AWSTemplateFormatVersion: 2010-09-09
Description: >-
  API for links project

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy
  SmsApiKey:
    Type: String
    Description: API key for sms-queue-api

Mappings:
  EnvironmentMap:
    prod:
      certificateEdge: adce1a21-90b4-4120-8548-111215e582f0
      certificateRegional: 5d4db894-c9fc-42ca-8f80-3c5da6c1678e
      corsDomain: https://links.dbowland.com
      domain: links-api.dbowland.com
      domainInternal: links-api-internal.dbowland.com
      logStreamFunction: log-subscriber
      schedulerFunction: scheduler-service
      smsApiUrl: https://sms-queue-api.dbowland.com/v1
      table: links-api
      userPool: us-east-2_h0oBECGFC
      userPoolClient: nd9p4gg5esgqvvop9u78umolb
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificateEdge: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      certificateRegional: 14a32175-0c26-4768-b71f-3fa611b8f5a2
      corsDomain: https://links.bowland.link
      domain: links-api.bowland.link
      domainInternal: links-api-internal.bowland.link
      logStreamFunction: log-subscriber-test
      schedulerFunction: scheduler-service-test
      smsApiUrl: https://sms-queue-api.bowland.link/v1
      table: links-api-test
      userPool: us-east-2_7k2VH6sSy
      userPoolClient: 56g7s1qsa7ppib7elgvavi8s2t
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  # API Gateway

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for links-api
      Domain:
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domainInternal]
        CertificateArn: !Sub
          - 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateEdge]
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
        BasePath:
          - /v1

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub
                - 'https://cognito-idp.us-east-2.amazonaws.com/${UserPool}'
                - UserPool: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
              audience:
                - !FindInMap [EnvironmentMap, !Ref Environment, userPoolClient]
        DefaultAuthorizer: CognitoAuthorizer
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
          - X-Api-Key
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowOrigins:
          - !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
      Domain:
        BasePath:
          - /v1
        CertificateArn: !Sub
          - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificateRegional]
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        EndpointConfiguration: REGIONAL
      FailOnWarnings: true
      StageName: v1

  # SAM won't create two Route53 records, so the HttpApi domain name is created separately
  HttpRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !Sub '${HttpApi.DomainName.RegionalDomainName}'
        HostedZoneId: !Sub '${HttpApi.DomainName.RegionalHostedZoneId}'
      HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      Name: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Type: A

  # Lambda

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-item.deleteByIdHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api delete by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LinksTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LinksTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /links/{linkId}
            Method: delete
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active

  DeleteItemLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  DeleteItemLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteItemLogGroup

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api get all items
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LinksTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LinksTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /links
            Method: get
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 30
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-all-items.ts

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllItemsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllItemsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  GetAllItemsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllItemsLogGroup

  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api get by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LinksTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LinksTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /links/{linkId}
            Method: get
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /links/{linkId}
            Method: get
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-by-id.ts

  GetByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetByIdFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  GetByIdLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetByIdLogGroup

  PatchItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/patch-item.patchItemHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LinksTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LinksTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /links/{linkId}
            Method: patch
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/patch-item.ts

  PatchLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  PatchGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchLogGroup

  PostItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-item.postItemHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LinksTable
      Environment:
        Variables:
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          DYNAMODB_TABLE_NAME: !Ref LinksTable
          ID_MIN_LENGTH: 3
          ID_MAX_LENGTH: 4
          LINKS_EXPIRE_DAYS: 365
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /links
            Method: post
            Auth:
              ApiKeyRequired: true
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /links
            Method: post
            Auth:
              Authorizer: NONE
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-item.ts

  PostLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  PostGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostLogGroup

  PostPruneItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-start-prune.postStartPruneHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api post item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LinksTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LinksTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /start-prune
            Method: post
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 60
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-start-prune.ts

  PostPruneLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostPruneItemFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  PostPruneGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostPruneLogGroup

  PostSendTextFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-send-text.postSendTextHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: links-api post send text
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CORS_DOMAIN: !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
          SMS_API_KEY: !Ref SmsApiKey
          SMS_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, smsApiUrl]
          USER_POOL_ID: !FindInMap [EnvironmentMap, !Ref Environment, userPool]
      Events:
        Http:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /links/{linkId}/send-text
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Tags:
        'created-by': 'links-api'
        'created-for': 'links'
        'environment': !Ref Environment
      Timeout: 10
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-send-text.ts

  PostSendTextLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PostSendTextFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSendTextFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  PostSendTextGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSendTextLogGroup

  # DynamoDB

  LinksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: LinkId
          AttributeType: S
        - AttributeName: Expiration
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ExpirationIndex
          KeySchema:
            - AttributeName: Expiration
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - LinkId
            ProjectionType: INCLUDE
      KeySchema:
        - AttributeName: LinkId
          KeyType: HASH
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, table]
      Tags:
        - Key: 'created-by'
          Value: 'links-api'
        - Key: 'created-for'
          Value: 'links'
        - Key: 'environment'
          Value: !Ref Environment

  # EventBridge

  PruneEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Prunes old links from link table
      ScheduleExpression: 'cron(17 8 1/3 * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Sub
            - 'arn:aws:lambda:us-east-2:${AWS::AccountId}:function:${FunctionName}'
            - FunctionName: !FindInMap [EnvironmentMap, !Ref Environment, schedulerFunction]
          Id: SchedulerLambda
          InputTransformer:
            InputPathsMap:
              'resources': '$.resources'
            InputTemplate: !Sub
              - |
                {
                  "resources": <resources>,
                  "request": {
                    "url": "https://${Domain}/v1/start-prune",
                    "method": "POST",
                    "data": { }
                  },
                  "apiKey": {
                    "id": "${ApiKey}",
                    "region": "us-east-2"
                  }
                }
              - ApiKey: !Sub '${Api.ApiKey.APIKeyId}'
                Domain: !FindInMap [EnvironmentMap, !Ref Environment, domainInternal]
